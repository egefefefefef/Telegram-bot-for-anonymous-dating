use std::collections::HashMap;
use std::sync::Arc;
use teloxide::{prelude::*, types::{InlineKeyboardButton, InlineKeyboardMarkup, UserId}, utils::command::BotCommands};
use dotenv::dotenv;
use tokio::sync::Mutex;
use rand::{RngCore, thread_rng};

// --- –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —á–∏—Å—Ç–æ–º Rust ---
use aes::Aes256;
use cbc::cipher::{BlockDecryptMut, BlockEncryptMut, KeyIvInit, block_padding::Pkcs7};

// --- –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---

#[derive(Clone)]
struct PartnerInfo {
    partner_id: UserId,
    key: [u8; 32],
}

#[derive(Clone, Default)]
struct State {
    queue: Vec<UserId>,
    pairs: HashMap<UserId, PartnerInfo>,
}

impl State {
    fn new() -> Self { Self::default() }
}

type AppState = Arc<Mutex<State>>;

// --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---

#[derive(BotCommands, Clone)]
#[command(rename_rule = "lowercase", description = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")]
enum Command {
    #[command(description = "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏.")]
    Start,
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---

#[tokio::main]
async fn main() {
    dotenv().ok();
    let token = std::env::var("TOKEN").expect("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    let bot = Bot::new(token);

    // –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    let state = Arc::new(Mutex::new(State::new()));

    let handler = dptree::entry()
        .branch(Update::filter_message().filter_command::<Command>().endpoint(command_handler))
        .branch(Update::filter_callback_query().endpoint(callback_handler))
        .branch(Update::filter_message().endpoint(message_handler));

    println!("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...");

    Dispatcher::builder(bot, handler)
        .dependencies(dptree::deps![state])
        .enable_ctrlc_handler()
        .build()
        .dispatch()
        .await;
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

async fn command_handler(bot: Bot, msg: Message, _cmd: Command) -> ResponseResult<()> {
    let keyboard = make_keyboard();
    bot.send_message(
        msg.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç!\n\n–ù–∞–∂–º–∏—Ç–µ '–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫."
    )
    .reply_markup(keyboard)
    .await?;
    Ok(())
}

async fn callback_handler(bot: Bot, q: CallbackQuery, state: AppState) -> ResponseResult<()> {
    let user_id = q.from.id;
    let chat_id = q.message.as_ref().unwrap().chat.id;

    if let Some(data) = q.data {
        match data.as_str() {
            "search" => {
                bot.answer_callback_query(q.id).text("–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...").await?;
                let mut s = state.lock().await;

                if s.pairs.contains_key(&user_id) {
                    bot.send_message(chat_id, "–í—ã —É–∂–µ –≤ —á–∞—Ç–µ.").await?;
                    return Ok(());
                }
                if s.queue.contains(&user_id) {
                    bot.send_message(chat_id, "–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏.").await?;
                    return Ok(());
                }

                s.queue.push(user_id);
                bot.send_message(chat_id, "–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å. –û–∂–∏–¥–∞–π—Ç–µ...").await?;

                if s.queue.len() >= 2 {
                    let u1_id = s.queue.remove(0);
                    let u2_id = s.queue.remove(0);
                    
                    let mut key = [0u8; 32];
                    thread_rng().fill_bytes(&mut key);
                    
                    let partner1_info = PartnerInfo { partner_id: u2_id, key };
                    let partner2_info = PartnerInfo { partner_id: u1_id, key };

                    s.pairs.insert(u1_id, partner1_info);
                    s.pairs.insert(u2_id, partner2_info);
                    
                    drop(s);

                    bot.send_message(ChatId(u1_id.0 as i64), "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–∞—Ç—å—Å—è.").await?;
                    bot.send_message(ChatId(u2_id.0 as i64), "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–∞—Ç—å—Å—è.").await?;
                }
            }
            "stop" => {
                bot.answer_callback_query(q.id).await?;
                let mut s = state.lock().await;

                if let Some(partner_info) = s.pairs.remove(&user_id) {
                    s.pairs.remove(&partner_info.partner_id);
                    drop(s);
                    bot.send_message(ChatId(partner_info.partner_id.0 as i64), "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.").await?;
                    bot.send_message(chat_id, "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç.").await?;
                } else if let Some(pos) = s.queue.iter().position(|&id| id == user_id) {
                    s.queue.remove(pos);
                    bot.send_message(chat_id, "–í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏.").await?;
                } else {
                    bot.send_message(chat_id, "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ –∏–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏.").await?;
                }
            }
            _ => {}
        }
    }
    Ok(())
}

type Aes256CbcEnc = cbc::Encryptor<Aes256>;
type Aes256CbcDec = cbc::Decryptor<Aes256>;

async fn message_handler(bot: Bot, msg: Message, state: AppState) -> ResponseResult<()> {
    if let (Some(text), Some(user)) = (msg.text(), msg.from()) {
        let user_id = user.id;

        let partner_info = {
            let s = state.lock().await;
            s.pairs.get(&user_id).cloned()
        };

        if let Some(info) = partner_info {
            let iv = &info.key[0..16];
            
            // --- 1. –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ ---
            let plaintext = text.as_bytes();
            let mut buffer = vec![0u8; plaintext.len() + 16];
            buffer[..plaintext.len()].copy_from_slice(plaintext);

            let ciphertext = Aes256CbcEnc::new(&info.key.into(), iv.into())
                .encrypt_padded_mut::<Pkcs7>(&mut buffer, plaintext.len())
                .expect("–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è");
            
            // --- 2. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ ---
            let mut decrypt_buffer = ciphertext.to_vec();

            let decrypted_result = Aes256CbcDec::new(&info.key.into(), iv.into())
                .decrypt_padded_mut::<Pkcs7>(&mut decrypt_buffer);
            
            // --- 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
            let original_text = match decrypted_result {
                Ok(bytes) => String::from_utf8(bytes.to_vec()).unwrap_or_else(|_| "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ UTF-8 —Å–æ–æ–±—â–µ–Ω–∏–µ".to_string()),
                Err(_) => "–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞.".to_string(),
            };
            
            bot.send_message(info.partner_id, original_text).await?;
        }
    }
    Ok(())
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

fn make_keyboard() -> InlineKeyboardMarkup {
    let mut keyboard: Vec<Vec<InlineKeyboardButton>> = vec![];
    let buttons = vec![
        InlineKeyboardButton::callback("–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ üîé", "search"),
        InlineKeyboardButton::callback("–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç ‚ùå", "stop"),
    ];
    keyboard.push(buttons);
    InlineKeyboardMarkup::new(keyboard)
}